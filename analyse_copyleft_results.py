"""
This script takes any number of filename arguments, each containing a json object that was generated by the copyleft_clause.py script.
It then compares the results of the copyleft clause detection with the OSADL copyleft table and prints a summary of the results.
It also outputs an HTML file with a table summarizing the results.

For each llm used, identified by the filename, it will also create a majority vote result.
"""
import json
import html
import utils


def load_results(filenames):
    results = {}
    for filename in filenames:
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                data = json.load(file)
                llm_name = '-'.join(filename.split('-')[:-1])
                print(f"Loaded results from {filename} for LLM: {llm_name}")
                if llm_name not in results:
                    results[llm_name] = []
                results[llm_name].append(data)
        except FileNotFoundError:
            print(f"File {filename} not found. Skipping.")
        except json.JSONDecodeError:
            print(f"Error decoding JSON from {filename}. Skipping.")

    return results

def add_majority_votes(results):
    """
    Adds a majority vote result for each LLM in the results dictionary.
    """
    majority_votes = {}
    for llm_name, llm_results in results.items():
        if len(llm_results) == 1:
            print(f"Only one result for {llm_name}, skipping majority vote.")
            continue

        majority_vote = {
            "llm": f"{llm_name}-MAJORITY-{len(llm_results)}",
            "copyleft": {}
        }
        for license_id in llm_results[0]['copyleft'].keys():
            majority_vote["copyleft"][license_id] = {}
            votes = [result['copyleft'][license_id]['result'] for result in llm_results]
            amount_true = votes.count(True)
            amount_false = votes.count(False)
            majority_vote["copyleft"][license_id]["result"] = True if amount_true > amount_false else False
            majority_vote["copyleft"][license_id]["explanation"] = "Majority vote resulting from: " + ', '.join([str(vote) for vote in votes])

        majority_votes[f"{llm_name}-MAJORITY-{len(llm_results)}"] = []
        majority_votes[f"{llm_name}-MAJORITY-{len(llm_results)}"].append(majority_vote)

    # Add majority votes to the results
    for llm_name, majority_vote in majority_votes.items():
        if llm_name not in results:
            results[llm_name] = []
        results[llm_name].extend(majority_vote)
        print(f"Added majority vote for {llm_name} with {len(majority_vote)} entries.")

def add_accuracy_score(results):
    """
    Adds an accuracy score for each LLM based on agreement with OSADL results.
    """
    for llm_name, llm_results in results.items():
        total_licenses = len(llm_results[0]['copyleft'])

        # Loop over each run in the LLM results
        for idx, result in enumerate(llm_results):
            times_agreed = 0
            true_copyleft = 0
            false_copyleft = 0
            true_permissive = 0
            false_permissive = 0
            for license_id, license_result in result['copyleft'].items():
                osadl_result = utils.get_osadl_copyleft_table()["copyleft"][license_id]
                if (osadl_result[0] == "Y") == license_result["result"]:
                    times_agreed += 1
                # Also update confusion matrix counts
                if osadl_result[0] == "Y":
                    if license_result["result"]:
                        true_copyleft += 1
                    else:
                        false_permissive += 1
                else:
                    if license_result["result"]:
                        false_copyleft += 1
                    else:
                        true_permissive += 1

                license_result["correct"] = ((osadl_result[0] == "Y") == license_result["result"])

            accuracy = (times_agreed / total_licenses) * 100
            result["accuracy"] = accuracy
            print(f"Accuracy for {llm_name} Run {idx+1}: {accuracy:.2f}% ({times_agreed}/{total_licenses})")
            print(f"Confusion Matrix for {llm_name} Run {idx+1}:")
            print(f"  True Copyleft: {true_copyleft},\tFalse Copyleft: {false_copyleft}")
            print(f"  False Permissive: {false_permissive},\tTrue Permissive: {true_permissive}")

def generate_html_summary(results, output_filename="copyleft_summary.html"):
    """
    Generates an HTML summary of the copyleft results.
    """
    html_content = "<html><head><title>Copyleft Clause Detection Summary</title></head><body>"
    html_content += "<h1>Copyleft Clause Detection Summary</h1>"

    # Collect all license IDs
    all_license_ids = set()
    for llm_results in results.values():
        for result in llm_results:
            all_license_ids.update(result['copyleft'].keys())
    all_license_ids = sorted(all_license_ids)

    # Load OSADL results
    osadl_copyleft_table = utils.get_osadl_copyleft_table()["copyleft"]

    # Prepare LLM names
    llm_names = [llm for llm in results.keys()]

    # Prepare table header
    html_content += "<table border='1'><tr><th>License ID</th><th>OSADL</th>"
    for llm in llm_names:
        for idx, _ in enumerate(results[llm]):
            html_content += f"<th>{llm} Run {idx+1}</th>"
    html_content += "</tr>"

    # Fill table rows
    for license_id in all_license_ids:
        html_content += f"<tr><td>{license_id}</td>"
        # OSADL result
        html_content += f"<td>{osadl_copyleft_table[license_id]}</td>"
        # LLM results
        for llm in llm_names:
            for result in results[llm]:
                llm_result = result['copyleft'][license_id]["result"]
                llm_explanation = result['copyleft'][license_id]["explanation"]
                # Make llm_explanation HTML-safe
                llm_explanation = html.escape(llm_explanation, quote=True)
                # Style string: Background red for result['copyleft'][license_id]["correct"] == False
                # Green for True
                style = "background-color: red;" if not result['copyleft'][license_id]["correct"] else "background-color: green;"
                html_content += f"<td style=\"{style}\"><abbr title=\"{llm_explanation}\">{llm_result}</abbr></td>"
        html_content += "</tr>"

    # Add an accuracy row for each LLM
    html_content += "<tr><th colspan='2'>Accuracy</th>"
    for llm in llm_names:
        for result in results[llm]:
            accuracy = result.get("accuracy", "N/A")
            html_content += f"<td>{accuracy:.2f}%</td>"
    html_content += "</tr>"

    html_content += "</table></body></html>"

    with open(output_filename, 'w', encoding='utf-8') as file:
        file.write(html_content)

    print(f"HTML summary generated: {output_filename}")

if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print("Usage: python analyse_copyleft_results.py <result_file1> <result_file2> ...")
        sys.exit(1)

    result_filenames = sys.argv[1:]
    results = load_results(result_filenames)

    if not results:
        print("No valid results found.")
        sys.exit(1)

    add_majority_votes(results)
    add_accuracy_score(results)
    generate_html_summary(results)